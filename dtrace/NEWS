DTrace Kernel Modules News
==========================

Release 0.4.4 (Mar 12th, 2015)
-----------------------------
Kernel release: 3.8.13-69.el6uek

Bugfixes:

 - Renamed the dtrace-modules-headers package to dtrace-modules-shared-headers
   to work around problems in Yum where a symbol has had both versioned and
   unversioned provides over time.

Release 0.4.3 (May 1st, 2014)
-----------------------------
Kernel release: 3.8.13-33.el6uek

New features:

 - Timer based profile-* probes (profile provider).  These probes use the
   omni-present cyclic support in the UEK3 kernel (3.8.13-32 and later) to
   fire probes at a speciic frequency/interval on every active CPU.

Changes:

 - The pid and ppid variables were being reported based on the kernel task
   PID, which is not the same as the userspace concept of a PID (for threaded
   applications).  We now pass (more correctly) the thread group id (tgid).
 - Since userspace doesn't know about thread kernel level) pids, we are now
   also passing the tgid in the result of ustack, usym, etc...  We pass the
   tgid in the first slot, and the (kernel) pid in the second slot.

Bugfixes:

 - Major reworking of the dtracce_getufpstack() implementation to handle
   locking, stack detection, and potential page fault while accessing the
   stack of a task.

Known problems:

 - As a result of earlier code changes to ensure that all memory allocation
   requests are checked for failures, the test for auto-resize behaviour of
   the principal buffer allocations results in the dtrace utility aborted
   processing rather than continuing operation with the reduced buffer size.
   This is overall a non-harmful regression that will be addressed in a future
   release.

Release 0.4.2 (Dec 20th, 2013)
------------------------------
Kernel release: 3.8.13-22.el6uek

Changes:

 - SDT probe points in kernel modules are now supported.
 - The 'vtimestamp' D variable has been implemented.

Release 0.4.1 (Nov  6th, 2013)
------------------------------
Kernel release: 3.8.13-16.2.1.el6uek

Changes:

 - It is no longer permissible to have non-unique provider names within the
   context of a userspace process.  I.e. it is not permissible for the main
   executable and a loaded shared library, or two loaded shared libraries, to
   list the same provider name in their DOF sections.
 - A new cyclic implementation has been included in the UEK3 kernel, replacing
   the more error prone former version.  The modules code has been updated to
   use that new implementation.

Bugfixes:

 - Lock ordering problems that were inherited from the original code are fixed.
 - Userspace stack memory accesses are now performed in a safe manner.
 - A race condition between speculative tracing buffer cleaning and destroying
   consumer state has been resolved.
 - A memory leak related to consumer state has been fixed.
 - A provider reference counter calculation problem was resolved.
 - The 'errno' D variable now holds the correct value during syscall:::return
   probe action execution, i.e. 0 if the syscall completed without an error,
   and a valid error code if the syscall failed.

Release 0.4.0 (Sep 20th, 2013)
------------------------------
Kernel release: 3.8.13-16.el6uek

New features:

 - Support for meta-providers, such as fasttrap (used for userspace tracing).
   A meta-provider implements a framework to instantiate providers dynamically
   (on demand).
 - Userspace Statically Defined Tracing (USDT) provides support for SDT-alike
   probes in userspace executable and libraries.  Two types of probes are
   available: regular SDT-alike probes, and is-enabled probes.
 - The fasttrap provider has been implemented, although it is currently only
   supporting USDT probes.

Changes:

 - What was previously defined as a meta-provider (see 0.2.0 below) is in fact
   better defined as a multi-provider, i.e. a provider framework that handles
   multiple providers that essentially share (the majority of) a single
   implementation, such as SDT where probes are grouped together into providers
   even though they are all provided by the same provider (sdt).
 - The DTrace header files in the kernel proper, the kernel modules, and the
   userspace utility have been restructured to avoid duplication and to offer
   a more consistent and clean design.  This also offers better support for
   custom consumers or other DTrace-related utilities.
 - The systrace provider has been updated to account for changes in the Linux
   kernel (between 2.6.39 and 3.8.13).

Bugfixes:

 - It is now possible to get the correct value for the ERR registers.
 - The ustack() and jstack() actions were not passing the PID correctly as the
   first element in the result array.
 - The ustack() action implementation has been replaced.
 - Several obscure locking problems have been resolved.
 - Correct handling of arg5 through arg9.

Release 0.3.0 (Sep 14th, 2012)
------------------------------
Kernel release: 2.6.39-201.0.1.el6uek

New features:

 - The curcpu builtin variable has been implemented as a DIF builtin variable
   on Linux, providing a pointer to the CPU info structure for the CPU that is
   currently active.

 - A new DIF subroutine has been implemented: d_path().  This subroutine takes
   a pointer to a path structure as argument, and returns a string representing
   the full pathname for that path.

 - The raise() action has been implemented.  This action allows a D script to
   raise a signal in the current task.

 - The io provider probes has been implemented.  It provides the following SDT
   probes: start, wait-start, wait-done, and done.

 - The proc provider has been implemented.  It provides the following SDT
   probes: create, exec, exec-failure, exit, lwp-create, lwp-exit, lwp-start,
   signal-clear, signal-discard, signal-handle, signal-send, start.

 - The sched provider has been implemented.  It provides the following SDT
   probes: change-pri, dequeue, enqueue, off-cpu, on-cpu, preempt, remain-cpu,
   sleep, surrender, tick, wakeup.

 - Argument mappings have been provided for io, proc, and sched provider
   probes.  This information is used by userspace consumers.

Changes:

 - The invalid operand trap logic previously provided to support SDT probes has
   been made more generic to support any probes that wish to utilie this
   facility.

 - The DTrace core module now depends on the core kernel CTF data-module, to
   ensure that when DTrace modules are loaded on the system, CTF data for the
   kernel will be available also.

Bugfixes:

 - Various DIF builtin variables that were providing a hardcoded value based on
   the init task whenever a probe was executing in interrupt context are now
   providing the actual value from the current task.  In Linux, there is always
   a valid task structure available as 'current'.

 - The numbering of the registers for the x86_64 architecture has been updated
   to match the order of registers pushed onto the stack.

 - It is now possible to get the correct value for the DS, ES, FS, and GS
   registers.

 - SDT probes are now correctly cleaned up when the SDT meta-provider module is
   unloaded from the system.

 - The rw_read_held() DIF subroutine will now verify whether it can safely
   access the passed in argument based on the correct argument datatype.


Release 0.2.4 (Feb 15th, 2012)
------------------------------
Kernel release: 2.6.39-101.0.1.el6uek

Bugfixes:

 - Provider modules now use a reference counter to determine whether any of
   their probes are currently enabled.  Whenever the reference counter has a
   value greater than zero, the provider module is referenced to ensure that
   it cannot be unloaded.  Once the counter drops down to zero, the reference
   on the module is released.  This prevents providers from being unloaded
   while some of their probes are still in use (which would typically lead to
   a kernel panic).


Release 0.2.3 (Feb 10th, 2012)
------------------------------
Kernel release: 2.6.39-101.0.1.el6uek

Changes:

 - The DTrace core has been updated to support 28 DTrace option settings, to
   account for the 'quietresize' options that was added to the userspace dtrace
   consumer utility.

Bugfixes:

 - Various assertions in the DTrace core implementation incorrectly used
   mutex_is_locked() where the test was meant to determine whether the current
   task holds the mutex.  This has been corrected.


Release 0.2.1 (Jan 31st, 2012)
------------------------------
Kernel release: 2.6.39-101.0.1.el6uek

Bugfixes:

 - Failed memory allocations from DIF code no longer trigger kernel warnings.


Release 0.2.0 (Jan 25th, 2012)
------------------------------
Kernel release: 2.6.39-101.0.1.el6uek

This release brings DTrace for Linux to the 2.6.39 kernel, as an upgrade from
the previous release based on 2.6.32.

New features:

 - The DTrace core and provider API now support meta-providers, a framework
   that provides multiple providers using a common implementation.

 - The Statically Defined Tracing (SDT) meta-provider has been implemented.
   Some of the proc-provider probes are now available using this facility.

Changes:

 - The minimal cyclic implementation has been removed from the DTrace modules
   because it is now provided by an equivalent GPL impementation in the core
   kernel.

 - CPU core information is now maintained at the core kernel level.

 - Kernel and module code can now perform safe memory accesses by setting a
   flag in the CPU core information structure.  If a memory access results in
   a Page Fault or General Protection Fault, the failure will be noted as a CPU
   fault, and execution will continue rather than causing a kernel panic.

 - Functionality that depends on walking the stack (determining stack depth, or
   collecting a backtrace) is now provided by a GPL implementation in the core
   kernel.

 - In the interest of consistency, a pseudo kernel module structure is created
   at the core kernel level, representing the main kernel image.  This module
   structure makes it possible to represent all kernel-level objects equally.
   This structure provides a list of SDT probe locations in the core kernel.

Bugfixes:

 - Entry and return probes for system calls that use assembly code stubs are
   now supported (systrace provider).

 - All memory accesses from DIF code that cause a Page Fault or General
   Protection Fault now correctly cause the ERROR probe to fire rather than
   causing a kernel panic.

 - Dynamic memory allocations from DIF code can now fail.  Such failures are
   handled appropriately by the callers.

 - The implementation of the division and modulo operations for signed 64-bit
   values have been corrected.  This fixes various problems observed with
   aggregations.

 - The min() and max() aggregation functions now operate with correct (signed)
   initial values.

 - Code that depended on the idr_empty() function has been rewritten to use a
   more explicit mechanism, because the logic for determining whether an IDR
   structure had any elements or not was flawed.


Release 0.1.0 (Oct 20th, 2011)
------------------------------
Kernel release: 2.6.32-201.0.4.el6uek

First public release.

Features:

 - The vast majority of the DTrace core functionality has been implemented,
   providing a nearly complete DIF/DOF implementation (including predicates,
   aggregates, and speculative tracing support), provider API, ioctl interface
   for userspace consumers, and direct probe invocation.

 - BEGIN, END, and ERROR probes (dtrace provider).

 - Timer based tick-* probes (profile provider).

 - Syscall entry and return probes (systrace provider), with the exception of
   system calls that rely on assembly code stubs, such as clone().
